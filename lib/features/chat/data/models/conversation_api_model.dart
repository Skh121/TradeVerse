import 'package:json_annotation/json_annotation.dart';
import 'package:tradeverse/features/chat/domain/entity/conversation.dart';
import 'package:tradeverse/features/chat/domain/entity/user.dart';
import 'user_api_model.dart'; // Import UserApiModel

part 'conversation_api_model.g.dart'; // This file will be generated by build_runner

// Helper functions for List<User> <-> List<UserApiModel> conversion
List<User> _usersFromJson(List<dynamic> json) =>
    json.map((e) => UserApiModel.fromJson(e as Map<String, dynamic>)).toList();

List<Map<String, dynamic>> _usersToJson(List<User> users) =>
    users.map((e) => (e as UserApiModel).toJson()).toList();

@JsonSerializable()
class ConversationApiModel extends Conversation {
  // Renamed to ConversationApiModel
  @JsonKey(name: '_id')
  final String idModel;

  @JsonKey(
    name: 'participants',
    fromJson: _usersFromJson, // Use custom fromJson
    toJson: _usersToJson, // Use custom toJson
  )
  final List<User> participantsList; // Type remains List<User> for domain entity consistency

  @JsonKey(name: 'updatedAt')
  final DateTime updatedAtModel;

  const ConversationApiModel({
    required this.idModel,
    required this.participantsList,
    required this.updatedAtModel,
  }) : super(
         id: idModel,
         participants: participantsList,
         updatedAt: updatedAtModel,
       );

  factory ConversationApiModel.fromJson(Map<String, dynamic> json) =>
      _$ConversationApiModelFromJson(json);

  Map<String, dynamic> toJson() => _$ConversationApiModelToJson(this);
}
