
import 'package:json_annotation/json_annotation.dart';
import 'package:tradeverse/features/profile/domain/entity/profile_entity.dart';

part 'profile_api_model.g.dart'; // This file will be generated by build_runner

/// Represents the user's subscription details in the data layer.
/// Used for JSON serialization/deserialization.
@JsonSerializable()
class SubscriptionModel extends SubscriptionEntity {
  @JsonKey(name: 'plan')
  final String? planModel;

  const SubscriptionModel({this.planModel}) : super(plan: planModel);

  factory SubscriptionModel.fromJson(Map<String, dynamic> json) =>
      _$SubscriptionModelFromJson(json);

  Map<String, dynamic> toJson() => _$SubscriptionModelToJson(this);
}

/// Represents the user's basic details in the data layer.
/// Used for JSON serialization/deserialization.
@JsonSerializable()
class UserDetailModel extends UserDetailEntity {
  @JsonKey(name: 'fullName')
  final String fullNameModel;
  @JsonKey(name: 'email')
  final String emailModel;

  const UserDetailModel({required this.fullNameModel, required this.emailModel})
    : super(fullName: fullNameModel, email: emailModel);

  factory UserDetailModel.fromJson(Map<String, dynamic> json) =>
      _$UserDetailModelFromJson(json);

  Map<String, dynamic> toJson() => _$UserDetailModelToJson(this);
}

/// Helper function to parse the subscription field from the backend response.
/// It can be either a Map (if it's a full Subscription object) or a String (if it's just the plan name).
SubscriptionModel? _subscriptionFromJson(dynamic json) {
  if (json == null) {
    return null;
  } else if (json is String) {
    // If it's a string, assume it's the plan name
    return SubscriptionModel(planModel: json);
  } else if (json is Map<String, dynamic>) {
    // If it's a map, parse it as a full SubscriptionModel
    return SubscriptionModel.fromJson(json);
  }
  return null; // Fallback for unexpected types
}

/// Represents the complete user profile in the data layer.
/// Used for JSON serialization/deserialization and conversion to/from domain entity.
@JsonSerializable()
class ProfileModel extends ProfileEntity {
  @JsonKey(name: '_id')
  final String? idModel;
  @JsonKey(name: 'user')
  final UserDetailModel userModel;
  @JsonKey(
    name: 'subscription',
    fromJson: _subscriptionFromJson,
  ) // Use custom deserializer
  final SubscriptionModel? subscriptionModel;
  @JsonKey(name: 'firstName')
  final String firstNameModel;
  @JsonKey(name: 'lastName')
  final String lastNameModel;
  @JsonKey(name: 'bio')
  final String bioModel;
  @JsonKey(name: 'avatar')
  final String? avatarModel; // URL of the avatar image

  const ProfileModel({
    this.idModel,
    required this.userModel,
    this.subscriptionModel,
    required this.firstNameModel,
    required this.lastNameModel,
    required this.bioModel,
    this.avatarModel,
  }) : super(
         id: idModel,
         user: userModel,
         subscription: subscriptionModel,
         firstName: firstNameModel,
         lastName: lastNameModel,
         bio: bioModel,
         avatar: avatarModel,
       );

  factory ProfileModel.fromJson(Map<String, dynamic> json) =>
      _$ProfileModelFromJson(json);

  Map<String, dynamic> toJson() => _$ProfileModelToJson(this);
}
